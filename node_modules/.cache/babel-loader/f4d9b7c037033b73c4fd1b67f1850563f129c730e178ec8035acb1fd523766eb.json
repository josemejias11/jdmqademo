{"ast":null,"code":"var _jsxFileName = \"/Users/josemejias/WebstormProjects/jdmqademo/src/context/TaskContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = '/api/tasks';\n// Create the context\nexport const TaskContext = /*#__PURE__*/createContext(undefined);\n\n// Custom hook to use the context\nexport const useTasks = () => {\n  _s();\n  const context = useContext(TaskContext);\n  if (!context) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n_s(useTasks, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Provider component\nexport const TaskProvider = ({\n  children\n}) => {\n  _s2();\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Get the auth token for API requests\n  const getAuthToken = () => localStorage.getItem('auth_token');\n\n  // Configure axios with auth token\n  const getAxiosConfig = useCallback(() => {\n    const token = getAuthToken();\n    return {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n  }, []);\n\n  // Load tasks from API on initial load\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await axios.get(API_URL, getAxiosConfig());\n        setTasks(response.data);\n      } catch (err) {\n        var _apiError$response, _apiError$response$da;\n        const apiError = err;\n        console.error('Error fetching tasks:', apiError);\n        setError(((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : (_apiError$response$da = _apiError$response.data) === null || _apiError$response$da === void 0 ? void 0 : _apiError$response$da.message) || 'Failed to load tasks. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    void fetchTasks();\n  }, [getAxiosConfig]);\n\n  // Add a new task via API\n  const addTask = async text => {\n    if (text.trim() === '') return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(API_URL, {\n        title: text.trim(),\n        description: ''\n      }, getAxiosConfig());\n      setTasks([...tasks, response.data]);\n    } catch (err) {\n      var _apiError$response2, _apiError$response2$d;\n      const apiError = err;\n      console.error('Error adding task:', apiError);\n      setError(((_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : (_apiError$response2$d = _apiError$response2.data) === null || _apiError$response2$d === void 0 ? void 0 : _apiError$response2$d.message) || 'Failed to add task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const handleAddTask = e => {\n    e.preventDefault();\n    void addTask(task);\n    setTask('');\n  };\n\n  // Toggle the 'done' status of a task via API\n  const toggleTaskDone = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Find the task to toggle\n      const taskToToggle = tasks.find(t => t.id === id);\n      if (!taskToToggle) {\n        console.error('Task not found');\n        setError('Task not found');\n        return;\n      }\n\n      // Update the task via API\n      const response = await axios.put(`${API_URL}/${id}`, {\n        completed: !taskToToggle.completed\n      }, getAxiosConfig());\n\n      // Update local state\n      setTasks(tasks.map(t => t.id === id ? response.data : t));\n    } catch (err) {\n      var _apiError$response3, _apiError$response3$d;\n      const apiError = err;\n      console.error('Error toggling task:', apiError);\n      setError(((_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : (_apiError$response3$d = _apiError$response3.data) === null || _apiError$response3$d === void 0 ? void 0 : _apiError$response3$d.message) || 'Failed to update task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a task via API\n  const deleteTask = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      await axios.delete(`${API_URL}/${id}`, getAxiosConfig());\n      setTasks(tasks.filter(t => t.id !== id));\n    } catch (err) {\n      var _apiError$response4, _apiError$response4$d;\n      const apiError = err;\n      console.error('Error deleting task:', apiError);\n      setError(((_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : (_apiError$response4$d = _apiError$response4.data) === null || _apiError$response4$d === void 0 ? void 0 : _apiError$response4$d.message) || 'Failed to delete task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    tasks,\n    task,\n    setTask,\n    handleAddTask,\n    toggleTaskDone,\n    deleteTask,\n    loading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 10\n  }, this);\n};\n_s2(TaskProvider, \"IFMxhLUmb194QCgDtxbyozFeo0c=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","API_URL","TaskContext","undefined","useTasks","_s","context","Error","TaskProvider","children","_s2","tasks","setTasks","task","setTask","loading","setLoading","error","setError","getAuthToken","localStorage","getItem","getAxiosConfig","token","headers","Authorization","fetchTasks","response","get","data","err","_apiError$response","_apiError$response$da","apiError","console","message","addTask","text","trim","post","title","description","_apiError$response2","_apiError$response2$d","handleAddTask","e","preventDefault","toggleTaskDone","id","taskToToggle","find","t","put","completed","map","_apiError$response3","_apiError$response3$d","deleteTask","delete","filter","_apiError$response4","_apiError$response4$d","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josemejias/WebstormProjects/jdmqademo/src/context/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport { Task, ApiError, AxiosAuthConfig } from '../types';\n\nconst API_URL = '/api/tasks';\n\ninterface TaskContextType {\n  tasks: Task[];\n  task: string;\n  setTask: (task: string) => void;\n  handleAddTask: (e: React.FormEvent<HTMLFormElement>) => void;\n  toggleTaskDone: (id: number) => void;\n  deleteTask: (id: number) => void;\n  loading: boolean;\n  error: string | null;\n}\n\n// Create the context\nexport const TaskContext = createContext<TaskContextType | undefined>(undefined);\n\n// Custom hook to use the context\nexport const useTasks = () => {\n  const context = useContext(TaskContext);\n  if (!context) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n\ninterface TaskProviderProps {\n  children: React.ReactNode;\n}\n\n// Provider component\nexport const TaskProvider: React.FC<TaskProviderProps> = ({ children }) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [task, setTask] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Get the auth token for API requests\n  const getAuthToken = (): string | null => localStorage.getItem('auth_token');\n\n  // Configure axios with auth token\n  const getAxiosConfig = useCallback((): AxiosAuthConfig => {\n    const token = getAuthToken();\n    return {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n  }, []);\n\n  // Load tasks from API on initial load\n  useEffect(() => {\n    const fetchTasks = async (): Promise<void> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response: AxiosResponse<Task[]> = await axios.get(API_URL, getAxiosConfig());\n        setTasks(response.data);\n      } catch (err) {\n        const apiError = err as ApiError;\n        console.error('Error fetching tasks:', apiError);\n        setError(\n          apiError.response?.data?.message || 'Failed to load tasks. Please try again later.'\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    void fetchTasks();\n  }, [getAxiosConfig]);\n\n  // Add a new task via API\n  const addTask = async (text: string): Promise<void> => {\n    if (text.trim() === '') return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response: AxiosResponse<Task> = await axios.post(\n        API_URL,\n        { title: text.trim(), description: '' },\n        getAxiosConfig()\n      );\n\n      setTasks([...tasks, response.data]);\n    } catch (err) {\n      const apiError = err as ApiError;\n      console.error('Error adding task:', apiError);\n      setError(apiError.response?.data?.message || 'Failed to add task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const handleAddTask = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    void addTask(task);\n    setTask('');\n  };\n\n  // Toggle the 'done' status of a task via API\n  const toggleTaskDone = async (id: number): Promise<void> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Find the task to toggle\n      const taskToToggle = tasks.find(t => t.id === id);\n      if (!taskToToggle) {\n        console.error('Task not found');\n        setError('Task not found');\n        return;\n      }\n\n      // Update the task via API\n      const response: AxiosResponse<Task> = await axios.put(\n        `${API_URL}/${id}`,\n        { completed: !taskToToggle.completed },\n        getAxiosConfig()\n      );\n\n      // Update local state\n      setTasks(tasks.map(t => (t.id === id ? response.data : t)));\n    } catch (err) {\n      const apiError = err as ApiError;\n      console.error('Error toggling task:', apiError);\n      setError(\n        apiError.response?.data?.message || 'Failed to update task. Please try again later.'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a task via API\n  const deleteTask = async (id: number): Promise<void> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      await axios.delete<void>(`${API_URL}/${id}`, getAxiosConfig());\n      setTasks(tasks.filter(t => t.id !== id));\n    } catch (err) {\n      const apiError = err as ApiError;\n      console.error('Error deleting task:', apiError);\n      setError(\n        apiError.response?.data?.message || 'Failed to delete task. Please try again later.'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    tasks,\n    task,\n    setTask,\n    handleAddTask,\n    toggleTaskDone,\n    deleteTask,\n    loading,\n    error\n  };\n\n  return <TaskContext.Provider value={value}>{children}</TaskContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}