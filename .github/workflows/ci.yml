name: QA Automation Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'full'
        type: choice
        options:
        - smoke
        - regression
        - full

# Cancel previous workflow runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.11.1'

jobs:
  # Security and dependency scanning
  security_scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        run: |
          # Run audit and capture output for review
          npm audit --audit-level high || echo "⚠️ Security vulnerabilities found - see details above"
          
          # Generate audit report for artifacts
          npm audit --json > audit-report.json || true
          
          # Show summary
          echo "📊 Security Audit Summary:"
          npm audit --audit-level critical || echo "No critical vulnerabilities found"

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 7

  # Quality gates - lint and type checking
  quality_gates:
    name: Code Quality & Type Safety
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Type check frontend
        run: npm run type-check

      - name: Type check server
        run: npm run type-check:server

      - name: Lint main project
        run: npm run lint

      - name: Install e2e dependencies
        run: |
          cd e2e
          npm ci --legacy-peer-deps

      - name: Lint e2e tests
        run: |
          cd e2e
          npm run lint

      - name: Type check e2e tests
        run: |
          cd e2e
          npm run type-check

      - name: Code formatting check
        run: |
          echo "🎨 Checking code formatting..."
          
          # Check formatting and capture exit code
          if npm run format:check; then
            echo "✅ All files are properly formatted"
          else
            echo "⚠️ Code style issues found."
            
            echo ""
            echo "🔧 To fix locally, run:"
            echo "npm run format"
            
            # For development workflow, we'll continue but mark as warning
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "::warning::Code formatting issues found. Please run 'npm run format' to fix."
              exit 0  # Don't fail PR builds on formatting
            else
              exit 1  # Fail on main/develop pushes
            fi
          fi

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security_scan, quality_gates]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build frontend
        run: npm run build

      - name: Build server
        run: npm run build:server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            build/
            server/dist/
          retention-days: 1

  # Multi-browser E2E testing with matrix strategy
  e2e_tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [quality_gates, build]
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox
          - browser: webkit
            project: webkit

    env:
      NODE_ENV: test
      JWT_SECRET: devsecret
      API_URL: http://localhost:3001
      CI: true
      BROWSER: ${{ matrix.browser }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install e2e dependencies
        run: |
          cd e2e
          npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: |
          cd e2e
          npx playwright install ${{ matrix.browser }} --with-deps

      - name: Set up test environment
        run: |
          cd e2e
          cat > .env << EOF
          BASE_URL=http://localhost:3000
          API_URL=http://localhost:3001
          TEST_USERNAME=admin
          TEST_PASSWORD=changeme
          ADMIN_USERNAME=admin
          ADMIN_PASSWORD=changeme
          HEADLESS=true
          RECORD_VIDEO_ON_FAILURE=true
          SCREENSHOT_ON_FAILURE=true
          DEFAULT_TIMEOUT=10000
          BROWSER=${{ matrix.browser }}
          EOF

      - name: Start backend server
        run: |
          npm run server &
          npx wait-on http://localhost:3001/api/health --timeout 30000

      - name: Start frontend application
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: |
          cd e2e
          TEST_SUITE="${{ github.event.inputs.test_suite || 'full' }}"
          if [ "$TEST_SUITE" = "smoke" ]; then
            npx playwright test --grep "smoke" --project=${{ matrix.project }}
          elif [ "$TEST_SUITE" = "regression" ]; then
            npx playwright test --grep "regression" --project=${{ matrix.project }}
          else
            npx playwright test --project=${{ matrix.project }}
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 7

  # Performance and accessibility testing
  performance_tests:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: [quality_gates]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Start application for testing
        run: |
          npm run server &
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        run: |
          # Install Lighthouse CI
          npm install -g @lhci/cli@0.12.x
          
          # Run Lighthouse CI without upload artifacts to avoid naming issues
          lhci autorun --config=./.lighthouserc.json || echo "⚠️ Lighthouse CI completed with warnings"
        continue-on-error: true

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: |
            .lighthouseci/
            lhci_reports/
          retention-days: 7
        continue-on-error: true

      - name: Run accessibility tests
        run: |
          cd e2e
          npm ci --legacy-peer-deps
          npx playwright install --with-deps
          npx playwright test --grep "accessibility" --reporter=html

  # Final validation and reporting
  qa_summary:
    name: QA Summary & Validation
    runs-on: ubuntu-latest
    needs: [security_scan, quality_gates, build, e2e_tests, performance_tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "🔍 QA Pipeline Results Summary"
          echo "Security Scan: ${{ needs.security_scan.result }}"
          echo "Quality Gates: ${{ needs.quality_gates.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "E2E Tests: ${{ needs.e2e_tests.result }}"
          echo "Performance Tests: ${{ needs.performance_tests.result }}"
          
          # Note: Security scan may show 'failure' due to dev dependency vulnerabilities
          # This is acceptable for non-production code paths

      - name: Generate QA report
        run: |
          echo "## 🧪 QA Automation Report" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security_scan.result == 'success' && '✅ Passed' || '⚠️ See Details' }} | Dev dependencies may have known issues |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality_gates.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code quality and type safety |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} | Application compilation |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e_tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | Cross-browser functionality |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance_tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | Lighthouse & accessibility |" >> $GITHUB_STEP_SUMMARY

      - name: QA validation status
        run: |
          # Primary validation: E2E tests and quality gates must pass
          if [ "${{ needs.e2e_tests.result }}" = "success" ] && [ "${{ needs.quality_gates.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ QA validation passed - Ready for review"
            echo "ℹ️ Note: Security scan may show vulnerabilities in dev dependencies (not affecting production)"
            exit 0
          else
            echo "❌ QA validation failed - Review required"
            echo "Failed components:"
            [ "${{ needs.e2e_tests.result }}" != "success" ] && echo "  - E2E Tests: ${{ needs.e2e_tests.result }}"
            [ "${{ needs.quality_gates.result }}" != "success" ] && echo "  - Quality Gates: ${{ needs.quality_gates.result }}"
            [ "${{ needs.build.result }}" != "success" ] && echo "  - Build: ${{ needs.build.result }}"
            exit 1
          fi
