name: Enterprise QA Pipeline

on:
  push:
    branches: [main, develop, 'release/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'full'
        type: choice
        options:
        - smoke
        - regression
        - full

# Cancel previous workflow runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.11.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and dependency scanning
  security_scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Quality gates - lint and type checking
  quality_gates:
    name: Code Quality & Type Safety
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Type check frontend
        run: npm run type-check

      - name: Type check server
        run: npm run type-check:server

      - name: Lint main project
        run: npm run lint

      - name: Install e2e dependencies
        run: |
          cd e2e
          npm ci --legacy-peer-deps

      - name: Lint e2e tests
        run: |
          cd e2e
          npm run lint

      - name: Type check e2e tests
        run: |
          cd e2e
          npm run type-check

      - name: Code formatting check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}" "server/**/*.{ts,js}" "e2e/src/**/*.{ts,js}"

  # Build and containerize application
  build_and_package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [security_scan, quality_gates]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build frontend
        run: npm run build

      - name: Build server
        run: npm run build:server

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            build/
            server/dist/
          retention-days: 1

  # Multi-browser E2E testing with matrix strategy
  e2e_tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [security_scan, quality_gates, build_and_package]
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox
          - browser: webkit
            project: webkit

    env:
      NODE_ENV: test
      JWT_SECRET: devsecret
      API_URL: http://localhost:3001
      CI: true
      BROWSER: ${{ matrix.browser }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install e2e dependencies
        run: |
          cd e2e
          npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: |
          cd e2e
          npx playwright install ${{ matrix.browser }} --with-deps

      - name: Set up test environment
        run: |
          cd e2e
          cat > .env << EOF
          BASE_URL=http://localhost:3000
          API_URL=http://localhost:3001
          TEST_USERNAME=admin
          TEST_PASSWORD=changeme
          ADMIN_USERNAME=admin
          ADMIN_PASSWORD=changeme
          HEADLESS=true
          RECORD_VIDEO_ON_FAILURE=true
          SCREENSHOT_ON_FAILURE=true
          DEFAULT_TIMEOUT=10000
          BROWSER=${{ matrix.browser }}
          EOF

      - name: Start backend server
        run: |
          npm run server &
          npx wait-on http://localhost:3001/api/health --timeout 30000

      - name: Start frontend application
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: |
          cd e2e
          npx playwright test --project=${{ matrix.project }} --reporter=html,junit,json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            e2e/test-results/
            e2e/playwright-report/
          retention-days: 7

      - name: Upload JUnit results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: E2E Tests (${{ matrix.browser }})
          path: e2e/test-results/results.xml
          reporter: java-junit

  # Performance and accessibility testing
  performance_tests:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: [quality_gates]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Start application for testing
        run: |
          npm run server &
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run accessibility tests
        run: |
          cd e2e
          npx playwright test --grep "accessibility" --reporter=html

  # Visual regression testing
  visual_regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [quality_gates]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install e2e dependencies
        run: |
          cd e2e
          npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: |
          cd e2e
          npx playwright install --with-deps

      - name: Start application for visual testing
        run: |
          npm run server &
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        run: |
          cd e2e
          npx playwright test --grep "visual" --update-snapshots

      - name: Upload visual diffs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-diffs
          path: e2e/test-results/
          retention-days: 7

  # Integration with external systems
  deployment_readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [e2e_tests, performance_tests, visual_regression]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment readiness
        run: |
          echo "✅ All quality gates passed"
          echo "✅ Security scan completed"
          echo "✅ E2E tests passed on all browsers"
          echo "✅ Performance benchmarks met"
          echo "✅ Visual regression tests passed"
          echo "✅ Ready for deployment"

      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | ✅ Passed |" >> $GITHUB_STEP_SUMMARY

      - name: Notify QA team on success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🎉 All quality checks passed! Ready for deployment: ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create release issue on success
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 Ready for Release - ${context.sha.substring(0, 7)}`,
              body: `✅ All quality gates passed for commit ${context.sha}\n\n**Quality Checks:**\n- ✅ Security scan\n- ✅ Code quality\n- ✅ E2E tests (Chrome, Firefox, Safari)\n- ✅ Performance tests\n- ✅ Visual regression tests\n\nReady for production deployment.`,
              labels: ['deployment', 'ready-for-release']
            })
