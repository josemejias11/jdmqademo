{"ast":null,"code":"var _jsxFileName = \"/Users/josemejias/WebstormProjects/jdmqademo/src/context/TaskContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = 'taskManager.tasks';\n// Create the context\nexport const TaskContext = /*#__PURE__*/createContext(undefined);\n\n// Custom hook to use the context\nexport const useTasks = () => {\n  _s();\n  const context = useContext(TaskContext);\n  if (!context) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n_s(useTasks, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Provider component\nexport const TaskProvider = ({\n  children\n}) => {\n  _s2();\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState('');\n  const loadStoredTasks = () => {\n    try {\n      const storedTasks = localStorage.getItem(STORAGE_KEY);\n      return storedTasks ? JSON.parse(storedTasks) : [];\n    } catch (error) {\n      console.error('Error loading tasks from localStorage:', error);\n      return [];\n    }\n  };\n\n  // Load tasks from localStorage on initial load\n  useEffect(() => {\n    setTasks(loadStoredTasks());\n  }, []);\n\n  // Save tasks to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));\n  }, [tasks]);\n  const addTask = text => {\n    if (text.trim() === '') return;\n    setTasks([...tasks, {\n      text: text.trim(),\n      done: false\n    }]);\n  };\n\n  // Add a new task\n  const handleAddTask = e => {\n    e.preventDefault();\n    addTask(task);\n    setTask('');\n  };\n\n  // Toggle the 'done' status of a task\n  const toggleTaskDone = index => {\n    const newTasks = [...tasks];\n    newTasks[index].done = !newTasks[index].done;\n    setTasks(newTasks);\n  };\n\n  // Delete a task\n  const deleteTask = index => {\n    setTasks(tasks.filter((_, i) => i !== index));\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    tasks,\n    task,\n    setTask,\n    handleAddTask,\n    toggleTaskDone,\n    deleteTask\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n_s2(TaskProvider, \"xQwwsjMh6FpMANDgxXtpwPlvsf4=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","STORAGE_KEY","TaskContext","undefined","useTasks","_s","context","Error","TaskProvider","children","_s2","tasks","setTasks","task","setTask","loadStoredTasks","storedTasks","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addTask","text","trim","done","handleAddTask","e","preventDefault","toggleTaskDone","index","newTasks","deleteTask","filter","_","i","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josemejias/WebstormProjects/jdmqademo/src/context/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Task } from '../types';\n\nconst STORAGE_KEY = 'taskManager.tasks';\n\ninterface TaskContextType {\n  tasks: Task[];\n  task: string;\n  setTask: (task: string) => void;\n  handleAddTask: (e: React.FormEvent<HTMLFormElement>) => void;\n  toggleTaskDone: (index: number) => void;\n  deleteTask: (index: number) => void;\n}\n\n// Create the context\nexport const TaskContext = createContext<TaskContextType | undefined>(undefined);\n\n// Custom hook to use the context\nexport const useTasks = () => {\n  const context = useContext(TaskContext);\n  if (!context) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n\ninterface TaskProviderProps {\n  children: React.ReactNode;\n}\n\n// Provider component\nexport const TaskProvider: React.FC<TaskProviderProps> = ({ children }) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [task, setTask] = useState<string>('');\n\n  const loadStoredTasks = () => {\n    try {\n      const storedTasks = localStorage.getItem(STORAGE_KEY);\n      return storedTasks ? JSON.parse(storedTasks) : [];\n    } catch (error) {\n      console.error('Error loading tasks from localStorage:', error);\n      return [];\n    }\n  };\n\n  // Load tasks from localStorage on initial load\n  useEffect(() => {\n    setTasks(loadStoredTasks());\n  }, []);\n\n  // Save tasks to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = (text: string): void => {\n    if (text.trim() === '') return;\n    setTasks([...tasks, { text: text.trim(), done: false }]);\n  };\n\n  // Add a new task\n  const handleAddTask = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    addTask(task);\n    setTask('');\n  };\n\n  // Toggle the 'done' status of a task\n  const toggleTaskDone = (index: number): void => {\n    const newTasks = [...tasks];\n    newTasks[index].done = !newTasks[index].done;\n    setTasks(newTasks);\n  };\n\n  // Delete a task\n  const deleteTask = (index: number): void => {\n    setTasks(tasks.filter((_, i) => i !== index));\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    tasks,\n    task,\n    setTask,\n    handleAddTask,\n    toggleTaskDone,\n    deleteTask\n  };\n\n  return <TaskContext.Provider value={value}>{children}</TaskContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}