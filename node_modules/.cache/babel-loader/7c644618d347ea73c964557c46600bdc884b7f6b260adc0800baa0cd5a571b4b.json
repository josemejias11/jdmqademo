{"ast":null,"code":"var _jsxFileName = \"/Users/josemejias/WebstormProjects/jdmqademo/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../utils/apiClient';\nimport { getAuthToken, setAuthToken, removeAuthToken } from '../utils/authUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Custom hook to use the context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const token = getAuthToken();\n        if (token) {\n          // In a real app, you would validate the token here\n          // For now, we'll just assume it's valid if it exists\n          setIsAuthenticated(true);\n          // Extract user info from token or make an API call to get user data\n          setUser({\n            username: 'user'\n          }); // Placeholder\n        }\n      } catch (error) {\n        const apiError = error;\n        console.error('Error checking authentication status:', apiError);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Use minimal headers for login request\n      const response = await apiClient.post('/api/auth/login', {\n        username,\n        password\n      });\n      const data = response.data;\n      const token = data.token;\n      if (!data || !data.success || !token.trim()) {\n        console.error('Invalid login response structure:', data);\n        return;\n      }\n\n      // Store token in localStorage\n      setAuthToken(token);\n\n      // Update auth state\n      setIsAuthenticated(true);\n      setUser({\n        username\n      });\n      console.warn('Logged in successfully');\n    } catch (err) {\n      var _apiError$response;\n      const apiError = err;\n      console.error('Login failed:', apiError);\n\n      // Special handling for 431 errors\n      if (((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.status) === 431) {\n        setError('Server error: Headers too large. Please try again later.');\n      } else {\n        var _apiError$response2, _apiError$response2$d;\n        setError(((_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : (_apiError$response2$d = _apiError$response2.data) === null || _apiError$response2$d === void 0 ? void 0 : _apiError$response2$d.message) || 'Login failed. Please check your credentials and try again.');\n      }\n      throw apiError;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    try {\n      // Remove token from localStorage\n      removeAuthToken();\n\n      // Update auth state\n      setIsAuthenticated(false);\n      setUser(null);\n      console.warn('Logged out successfully');\n    } catch (error) {\n      const apiError = error;\n      console.error('Logout failed:', apiError);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    loading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"vaOJqRNqhe8+3y/pDoWbnx+olHE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiClient","getAuthToken","setAuthToken","removeAuthToken","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","error","setError","checkAuthStatus","token","username","apiError","console","login","password","response","post","data","success","trim","warn","err","_apiError$response","status","_apiError$response2","_apiError$response2$d","message","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josemejias/WebstormProjects/jdmqademo/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../utils/apiClient';\nimport { User, AuthResponse, ApiError } from '../types';\nimport { getAuthToken, setAuthToken, removeAuthToken } from '../utils/authUtils';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n  error: string | null;\n}\n\n// Create the context\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Custom hook to use the context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\n// Provider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user is already authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = (): void => {\n      try {\n        const token = getAuthToken();\n        if (token) {\n          // In a real app, you would validate the token here\n          // For now, we'll just assume it's valid if it exists\n          setIsAuthenticated(true);\n          // Extract user info from token or make an API call to get user data\n          setUser({ username: 'user' }); // Placeholder\n        }\n      } catch (error) {\n        const apiError = error as ApiError;\n        console.error('Error checking authentication status:', apiError);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<void> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Use minimal headers for login request\n      const response = await apiClient.post<AuthResponse>('/api/auth/login', {\n        username,\n        password\n      });\n\n      const data = response.data;\n      const token = data.token;\n\n      if (!data || !data.success || !token.trim()) {\n        console.error('Invalid login response structure:', data);\n        return;\n      }\n\n      // Store token in localStorage\n      setAuthToken(token as string);\n\n      // Update auth state\n      setIsAuthenticated(true);\n      setUser({ username });\n\n      console.warn('Logged in successfully');\n    } catch (err) {\n      const apiError = err as ApiError;\n      console.error('Login failed:', apiError);\n      \n      // Special handling for 431 errors\n      if (apiError.response?.status === 431) {\n        setError('Server error: Headers too large. Please try again later.');\n      } else {\n        setError(\n          apiError.response?.data?.message ||\n            'Login failed. Please check your credentials and try again.'\n        );\n      }\n      throw apiError;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    try {\n      // Remove token from localStorage\n      removeAuthToken();\n\n      // Update auth state\n      setIsAuthenticated(false);\n      setUser(null);\n\n      console.warn('Logged out successfully');\n    } catch (error) {\n      const apiError = error as ApiError;\n      console.error('Logout failed:', apiError);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    loading,\n    error\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,SAAS,MAAM,oBAAoB;AAE1C,SAASC,YAAY,EAAEC,YAAY,EAAEC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWjF;AACA,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAA8BW,SAAS,CAAC;;AAEhF;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGb,UAAU,CAACS,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB;AACA,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAU,KAAK,CAAC;EACtE,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACuB,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMwB,eAAe,GAAGA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,KAAK,GAAGvB,YAAY,CAAC,CAAC;QAC5B,IAAIuB,KAAK,EAAE;UACT;UACA;UACAR,kBAAkB,CAAC,IAAI,CAAC;UACxB;UACAE,OAAO,CAAC;YAAEO,QAAQ,EAAE;UAAO,CAAC,CAAC,CAAC,CAAC;QACjC;MACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACd,MAAMK,QAAQ,GAAGL,KAAiB;QAClCM,OAAO,CAACN,KAAK,CAAC,uCAAuC,EAAEK,QAAQ,CAAC;MAClE,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAG,MAAAA,CAAOH,QAAgB,EAAEI,QAAgB,KAAoB;IACzET,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMQ,QAAQ,GAAG,MAAM9B,SAAS,CAAC+B,IAAI,CAAe,iBAAiB,EAAE;QACrEN,QAAQ;QACRI;MACF,CAAC,CAAC;MAEF,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAC1B,MAAMR,KAAK,GAAGQ,IAAI,CAACR,KAAK;MAExB,IAAI,CAACQ,IAAI,IAAI,CAACA,IAAI,CAACC,OAAO,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,CAAC,EAAE;QAC3CP,OAAO,CAACN,KAAK,CAAC,mCAAmC,EAAEW,IAAI,CAAC;QACxD;MACF;;MAEA;MACA9B,YAAY,CAACsB,KAAe,CAAC;;MAE7B;MACAR,kBAAkB,CAAC,IAAI,CAAC;MACxBE,OAAO,CAAC;QAAEO;MAAS,CAAC,CAAC;MAErBE,OAAO,CAACQ,IAAI,CAAC,wBAAwB,CAAC;IACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,kBAAA;MACZ,MAAMX,QAAQ,GAAGU,GAAe;MAChCT,OAAO,CAACN,KAAK,CAAC,eAAe,EAAEK,QAAQ,CAAC;;MAExC;MACA,IAAI,EAAAW,kBAAA,GAAAX,QAAQ,CAACI,QAAQ,cAAAO,kBAAA,uBAAjBA,kBAAA,CAAmBC,MAAM,MAAK,GAAG,EAAE;QACrChB,QAAQ,CAAC,0DAA0D,CAAC;MACtE,CAAC,MAAM;QAAA,IAAAiB,mBAAA,EAAAC,qBAAA;QACLlB,QAAQ,CACN,EAAAiB,mBAAA,GAAAb,QAAQ,CAACI,QAAQ,cAAAS,mBAAA,wBAAAC,qBAAA,GAAjBD,mBAAA,CAAmBP,IAAI,cAAAQ,qBAAA,uBAAvBA,qBAAA,CAAyBC,OAAO,KAC9B,4DACJ,CAAC;MACH;MACA,MAAMf,QAAQ;IAChB,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMsB,MAAM,GAAGA,CAAA,KAAY;IACzB,IAAI;MACF;MACAvC,eAAe,CAAC,CAAC;;MAEjB;MACAa,kBAAkB,CAAC,KAAK,CAAC;MACzBE,OAAO,CAAC,IAAI,CAAC;MAEbS,OAAO,CAACQ,IAAI,CAAC,yBAAyB,CAAC;IACzC,CAAC,CAAC,OAAOd,KAAK,EAAE;MACd,MAAMK,QAAQ,GAAGL,KAAiB;MAClCM,OAAO,CAACN,KAAK,CAAC,gBAAgB,EAAEK,QAAQ,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAMiB,KAAK,GAAG;IACZ5B,eAAe;IACfE,IAAI;IACJW,KAAK;IACLc,MAAM;IACNvB,OAAO;IACPE;EACF,CAAC;EAED,oBAAOhB,OAAA,CAACC,WAAW,CAACsC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9B,QAAA,EAAEA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAClC,GAAA,CAtGWF,YAAyC;AAAAqC,EAAA,GAAzCrC,YAAyC;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}