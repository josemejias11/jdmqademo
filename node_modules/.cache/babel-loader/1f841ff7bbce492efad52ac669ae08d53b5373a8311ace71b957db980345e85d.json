{"ast":null,"code":"var _jsxFileName = \"/Users/josemejias/WebstormProjects/jdmqademo/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Custom hook to use the context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          // In a real app, you would validate the token here\n          // For now, we'll just assume it's valid if it exists\n          setIsAuthenticated(true);\n          // Extract user info from token or make an API call to get user data\n          setUser({\n            username: 'user'\n          }); // Placeholder\n        }\n      } catch (error) {\n        console.error('Error checking authentication status:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('https://your-api.com/auth/login', {\n        username,\n        password\n      });\n      const data = response.data;\n      const token = data === null || data === void 0 ? void 0 : data.token;\n      if (!token || typeof token !== 'string') {\n        throw new Error('Invalid token received from server.');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('auth_token', token);\n\n      // Update auth state\n      setIsAuthenticated(true);\n      setUser({\n        username\n      });\n      console.log('Logged in successfully');\n    } catch (err) {\n      console.error('Login failed:', err);\n      setError('Login failed. Please check your credentials and try again.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    try {\n      // Remove token from localStorage\n      localStorage.removeItem('auth_token');\n\n      // Update auth state\n      setIsAuthenticated(false);\n      setUser(null);\n      console.log('Logged out successfully');\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    loading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"vaOJqRNqhe8+3y/pDoWbnx+olHE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","username","console","login","password","response","post","data","setItem","log","err","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josemejias/WebstormProjects/jdmqademo/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\ninterface User {\n  username: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n  error: string | null;\n}\n\n// Create the context\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Custom hook to use the context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\n// Provider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user is already authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          // In a real app, you would validate the token here\n          // For now, we'll just assume it's valid if it exists\n          setIsAuthenticated(true);\n          // Extract user info from token or make an API call to get user data\n          setUser({ username: 'user' }); // Placeholder\n        }\n      } catch (error) {\n        console.error('Error checking authentication status:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<void> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await axios.post('https://your-api.com/auth/login', {\n        username,\n        password\n      });\n\n      const data = response.data;\n      const token = data?.token;\n      \n      if (!token || typeof token !== 'string') {\n        throw new Error('Invalid token received from server.');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('auth_token', token);\n      \n      // Update auth state\n      setIsAuthenticated(true);\n      setUser({ username });\n      \n      console.log('Logged in successfully');\n    } catch (err) {\n      console.error('Login failed:', err);\n      setError('Login failed. Please check your credentials and try again.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    try {\n      // Remove token from localStorage\n      localStorage.removeItem('auth_token');\n      \n      // Update auth state\n      setIsAuthenticated(false);\n      setUser(null);\n      \n      console.log('Logged out successfully');\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    loading,\n    error\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}