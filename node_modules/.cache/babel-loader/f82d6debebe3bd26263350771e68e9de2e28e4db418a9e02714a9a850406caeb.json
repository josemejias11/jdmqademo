{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";// Create the context\nexport const AuthContext=/*#__PURE__*/createContext(undefined);// Custom hook to use the context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};// Provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Check if user is already authenticated on initial load\nuseEffect(()=>{const checkAuthStatus=()=>{try{const token=localStorage.getItem('auth_token');if(token){// In a real app, you would validate the token here\n// For now, we'll just assume it's valid if it exists\nsetIsAuthenticated(true);// Extract user info from token or make an API call to get user data\nsetUser({username:'user'});// Placeholder\n}}catch(error){console.error('Error checking authentication status:',error);}finally{setLoading(false);}};checkAuthStatus();},[]);const login=async(username,password)=>{setLoading(true);setError(null);try{const response=await axios.post('https://your-api.com/auth/login',{username,password});const data=response.data;const token=data===null||data===void 0?void 0:data.token;if(!token||typeof token!=='string'){throw new Error('Invalid token received from server.');}// Store token in localStorage\nlocalStorage.setItem('auth_token',token);// Update auth state\nsetIsAuthenticated(true);setUser({username});console.log('Logged in successfully');}catch(err){console.error('Login failed:',err);setError('Login failed. Please check your credentials and try again.');throw err;}finally{setLoading(false);}};const logout=()=>{try{// Remove token from localStorage\nlocalStorage.removeItem('auth_token');// Update auth state\nsetIsAuthenticated(false);setUser(null);console.log('Logged out successfully');}catch(error){console.error('Logout failed:',error);}};// Values and functions to expose via the context\nconst value={isAuthenticated,user,login,logout,loading,error};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","username","console","login","password","response","post","data","setItem","log","err","logout","removeItem","value","Provider"],"sources":["/Users/josemejias/WebstormProjects/jdmqademo/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\ninterface User {\n  username: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n  error: string | null;\n}\n\n// Create the context\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Custom hook to use the context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\n// Provider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user is already authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      try {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          // In a real app, you would validate the token here\n          // For now, we'll just assume it's valid if it exists\n          setIsAuthenticated(true);\n          // Extract user info from token or make an API call to get user data\n          setUser({ username: 'user' }); // Placeholder\n        }\n      } catch (error) {\n        console.error('Error checking authentication status:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<void> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await axios.post('https://your-api.com/auth/login', {\n        username,\n        password\n      });\n\n      const data = response.data;\n      const token = data?.token;\n      \n      if (!token || typeof token !== 'string') {\n        throw new Error('Invalid token received from server.');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('auth_token', token);\n      \n      // Update auth state\n      setIsAuthenticated(true);\n      setUser({ username });\n      \n      console.log('Logged in successfully');\n    } catch (err) {\n      console.error('Login failed:', err);\n      setError('Login failed. Please check your credentials and try again.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    try {\n      // Remove token from localStorage\n      localStorage.removeItem('auth_token');\n      \n      // Update auth state\n      setIsAuthenticated(false);\n      setUser(null);\n      \n      console.log('Logged out successfully');\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  // Values and functions to expose via the context\n  const value = {\n    isAuthenticated,\n    user,\n    login,\n    logout,\n    loading,\n    error\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}