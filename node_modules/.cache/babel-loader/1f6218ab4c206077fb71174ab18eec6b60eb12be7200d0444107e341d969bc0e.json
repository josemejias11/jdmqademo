{"ast":null,"code":"import React from'react';import{Navigate}from'react-router-dom';import{useAuth}from'../../context/AuthContext';import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children}=_ref;const{isAuthenticated,loading}=useAuth();// Show loading state while checking authentication\nif(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}// Redirect to login if not authenticated\nif(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{replace:true,to:\"/\"});}// Render children if authenticated\nreturn/*#__PURE__*/_jsx(_Fragment,{children:children});};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useAuth","jsx","_jsx","Fragment","_Fragment","ProtectedRoute","_ref","children","isAuthenticated","loading","replace","to"],"sources":["/Users/josemejias/WebstormProjects/jdmqademo/src/components/ProtectedRoute/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\n  const { isAuthenticated, loading } = useAuth();\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return <Navigate replace to=\"/\" />;\n  }\n\n  // Render children if authenticated\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,OAAO,KAAQ,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAMpD,KAAM,CAAAC,cAA6C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACjE,KAAM,CAAEE,eAAe,CAAEC,OAAQ,CAAC,CAAGT,OAAO,CAAC,CAAC,CAE9C;AACA,GAAIS,OAAO,CAAE,CACX,mBAAOP,IAAA,QAAAK,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA;AACA,GAAI,CAACC,eAAe,CAAE,CACpB,mBAAON,IAAA,CAACH,QAAQ,EAACW,OAAO,MAACC,EAAE,CAAC,GAAG,CAAE,CAAC,CACpC,CAEA;AACA,mBAAOT,IAAA,CAAAE,SAAA,EAAAG,QAAA,CAAGA,QAAQ,CAAG,CAAC,CACxB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}